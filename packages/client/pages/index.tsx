import {
  Box,
  Button,
  Container,
  Grid,
  TextField,
  ThemeProvider,
  Typography,
} from '@mui/material'
import { Deal } from '@whatsyourdeal/backend/types/models'
import Image from 'material-ui-image'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import api from '../api'
import TelegramButton from '../components/TelegramButton'
import styles from '../styles/Home.module.css'
import theme from '../theme/theme'
import PriceFormatter from '../util/PriceFormatter'
import { useGeoLocation } from '../util/useGeoLocation'
import { distance, formatDistance, isBlank } from '../util/util'

const MAX_DISTANCE_IN_METERS = 2000

const Home: NextPage = () => {
  const router = useRouter()

  const [currentDeals, setCurrentDeals] = useState<Deal[]>([])
  const [currentFilter, setCurrentFilter] = useState<string>('')
  const [categories, setCategories] = useState<Map<string, boolean>>(new Map())

  const { isLocationValid, userLatitude, userLongitude } = useGeoLocation()

  useEffect(() => {
    if (!isLocationValid) return
    ;(async () => {
      console.log(
        `Finding deals within ${MAX_DISTANCE_IN_METERS}m of ${userLatitude}, ${userLongitude}`
      )
      const data = await api.findDeals(userLatitude, userLongitude)
      setCurrentDeals(data.deals)
      populateCategories(data.deals)
    })()
  }, [isLocationValid, userLatitude, userLongitude])

  const populateCategories = (deals: Deal[]) => {
    const categories = new Set(
      deals.map((deal) => deal.merchantOutlet.merchant.category)
    )
    const categoryMap: Map<string, boolean> = new Map()
    categories.forEach((category) => categoryMap.set(category, true))
    setCategories(categoryMap)
  }

  const handleButtonClick = (item: string) => {
    const newMap = new Map(categories)
    const oldValue = newMap.get(item)
    newMap.set(item, !oldValue)
    setCategories(newMap)
  }

  const handleClick = (path: number) => {
    router.push(`/deal/${path}`)
  }

  const onTextChange = (text: string) => {
    setCurrentFilter(text)
  }

  const filterDealsToCriteria = (deals: Deal[], criteria: string) => {
    let result = deals

    // Sort according to location if user has location enabled
    if (isLocationValid) {
      result = result.sort(
        (a, b) =>
          distance(
            a.merchantOutlet.location.latitude,
            userLatitude,
            a.merchantOutlet.location.longitude,
            userLongitude
          ) -
          distance(
            b.merchantOutlet.location.latitude,
            userLatitude,
            b.merchantOutlet.location.longitude,
            userLongitude
          )
      )
    }

    // Category filter
    result = result.filter((deal) =>
      categories.get(deal.merchantOutlet.merchant.category)
    )

    if (isBlank(criteria)) {
      return result
    }

    // Filter result according to user criteria in text box
    const lowercaseCriteria = criteria.toLowerCase()
    return result.filter(
      (deal) =>
        deal.dealDescription.toLowerCase().includes(lowercaseCriteria) ||
        deal.merchantOutlet.merchant.name
          .toLowerCase()
          .includes(lowercaseCriteria) ||
        deal.merchantOutlet.address.toLowerCase().includes(lowercaseCriteria)
    )
  }

  return (
    <div>
      <Head>
        <title>What&apos;s Your Deal?</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Container>
          <ThemeProvider theme={theme}>
            <Box sx={{ m: 3 }} />

            <TelegramButton />
            <Typography variant="h3" component="div" gutterBottom>
              Find the nearest deals
            </Typography>

            <TextField
              fullWidth
              id="search"
              label="Search"
              variant="outlined"
              margin="normal"
              value={currentFilter}
              className={styles.textField}
              onChange={(e) => onTextChange(e.target.value)}
            />

            <Box sx={{ m: 2 }} />

            {Array.from(categories).map((categoryItem) => {
              const item = categoryItem[0]
              const status = categoryItem[1]
              return (
                <Button
                  key={item}
                  variant={status ? 'contained' : 'outlined'}
                  className={styles.category}
                  onClick={() => handleButtonClick(item)}
                >
                  {item}
                </Button>
              )
            })}

            <Box sx={{ m: 4 }} />

            <Typography align="left" variant="h4" component="div" gutterBottom>
              Nearby deals
            </Typography>

            <Grid container spacing={2}>
              {filterDealsToCriteria(currentDeals, currentFilter).map(
                (deal) => {
                  return (
                    <Grid
                      item
                      xs={6}
                      key={deal.id}
                      onClick={() => handleClick(deal.id)}
                    >
                      <div>
                        <Image
                          src={deal.merchantOutlet.imageUrl}
                          className={styles.image}
                        />
                        <Typography variant="h6">
                          {deal.merchantOutlet.merchant.name}
                        </Typography>
                        {isLocationValid ? (
                          <Typography>
                            {formatDistance(
                              userLatitude,
                              deal.merchantOutlet.location.latitude,
                              userLongitude,
                              deal.merchantOutlet.location.longitude
                            )}
                          </Typography>
                        ) : (
                          <div />
                        )}
                        <Typography sx={{ display: 'inline-block' }}>
                          {PriceFormatter.format(deal.currentPrice)}&nbsp;
                        </Typography>
                        <Typography
                          className={styles.strikethrough}
                          sx={{ display: 'inline-block' }}
                        >
                          {PriceFormatter.format(deal.originalPrice)}
                        </Typography>
                      </div>
                    </Grid>
                  )
                }
              )}
            </Grid>
          </ThemeProvider>
        </Container>
      </main>
    </div>
  )
}

export default Home
